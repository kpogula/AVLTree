/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 20:26:08 GMT 2022
 */

package avl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import avl.AvlTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AvlTree_ESTest extends AvlTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(0);
      avlTree0.delete(0);
      avlTree0.delete(0);
      avlTree0.delete((-2250));
      avlTree0.insert((-1403));
      avlTree0.insert(0);
      avlTree0.delete((-3021));
      avlTree0.insert(147);
      avlTree0.insert((-572));
      avlTree0.insert((-1860));
      avlTree0.find(530);
      avlTree0.delete(0);
      avlTree0.height();
      avlTree0.getRoot();
      avlTree0.find(0);
      avlTree0.getRoot();
      avlTree0.find(0);
      avlTree0.insert(0);
      avlTree0.insert((-1));
      // Undeclared exception!
      try { 
        avlTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(561);
      avlTree0.insert(1988);
      avlTree0.delete(1988);
      avlTree0.height();
      avlTree0.insert(2423);
      avlTree0.delete(7);
      avlTree0.delete(0);
      avlTree0.insert(229);
      avlTree0.insert(0);
      AvlTree.Node avlTree_Node0 = avlTree0.getRoot();
      AvlTree.Node avlTree_Node1 = avlTree0.getRoot();
      avlTree_Node1.key = 2423;
      avlTree_Node0.right = avlTree_Node1;
      avlTree0.find(0);
      avlTree_Node0.right = avlTree_Node1;
      avlTree_Node1.height = 0;
      avlTree_Node0.right = avlTree_Node1;
      avlTree_Node1.key = 7;
      avlTree_Node0.height = 1988;
      avlTree_Node0.right = avlTree_Node0;
      avlTree0.getBalance(avlTree_Node0);
      avlTree0.insert(1);
      // Undeclared exception!
      avlTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.delete(0);
      avlTree0.delete((-823));
      avlTree0.insert(840);
      avlTree0.delete(718);
      avlTree0.insert((-823));
      avlTree0.height();
      avlTree0.delete(0);
      avlTree0.delete(842);
      avlTree0.delete(1);
      AvlTree.Node avlTree_Node0 = avlTree0.getRoot();
      avlTree0.delete(1);
      avlTree0.height();
      avlTree_Node0.height = 718;
      AvlTree.Node avlTree_Node1 = avlTree0.getRoot();
      avlTree0.insert(1);
      avlTree0.delete((-165));
      avlTree_Node0.left = avlTree_Node1;
      avlTree_Node1.left = avlTree_Node0;
      avlTree_Node0.key = (-1);
      avlTree_Node1.right = avlTree_Node0;
      avlTree_Node1.right = avlTree_Node0.left;
      AvlTree.Node avlTree_Node2 = avlTree0.getRoot();
      avlTree0.getBalance(avlTree_Node1);
      avlTree_Node1.right = avlTree_Node2;
      avlTree0.getBalance(avlTree_Node1);
      avlTree0.delete((-1));
      avlTree0.delete((-1));
      avlTree0.getBalance(avlTree_Node2);
      avlTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.delete(1);
      avlTree0.insert(666);
      avlTree0.insert((-1619));
      AvlTree.Node avlTree_Node0 = avlTree0.getRoot();
      avlTree_Node0.key = (-1619);
      avlTree0.getBalance(avlTree_Node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.delete(0);
      avlTree0.insert(0);
      avlTree0.delete(0);
      avlTree0.delete(0);
      int int0 = 0;
      avlTree0.delete(0);
      avlTree0.insert(0);
      avlTree0.insert(2777);
      avlTree0.delete(2777);
      avlTree0.insert((-360));
      AvlTree.Node avlTree_Node0 = avlTree0.getRoot();
      AvlTree.Node avlTree_Node1 = avlTree0.getRoot();
      avlTree_Node0.right = avlTree_Node1;
      avlTree_Node0.key = (-360);
      // Undeclared exception!
      try { 
        avlTree0.insert(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.getRoot();
      avlTree0.insert((-1952));
      avlTree0.insert(3423);
      avlTree0.insert((-449));
      avlTree0.insert(0);
      avlTree0.insert((-1));
      avlTree0.find((-1014));
      avlTree0.delete((-449));
      avlTree0.delete(0);
      avlTree0.height();
      avlTree0.getRoot();
      avlTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.delete(3566);
      avlTree0.insert(3566);
      avlTree0.find(1729);
      AvlTree.Node avlTree_Node0 = avlTree0.getRoot();
      avlTree_Node0.height = 1729;
      avlTree0.insert(1729);
      avlTree_Node0.key = 1729;
      avlTree0.height();
      avlTree0.getBalance(avlTree_Node0);
      avlTree0.height();
      avlTree0.height();
      avlTree0.insert(1);
      int int0 = 0;
      avlTree0.delete(0);
      avlTree_Node0.height = 1920;
      // Undeclared exception!
      try { 
        avlTree0.insert((-1454));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert((-786));
      avlTree0.insert(1478);
      avlTree0.delete(1);
      AvlTree.Node avlTree_Node0 = avlTree0.new Node(1);
      avlTree0.getRoot();
      avlTree0.height();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(0);
      avlTree0.delete(0);
      avlTree0.find(0);
      avlTree0.insert(0);
      avlTree0.find(0);
      AvlTree.Node avlTree_Node0 = avlTree0.find(0);
      avlTree0.height();
      avlTree0.delete((-2135));
      AvlTree.Node avlTree_Node1 = avlTree0.getRoot();
      avlTree0.delete(0);
      avlTree0.find(0);
      avlTree0.height();
      avlTree0.getBalance(avlTree_Node1);
      avlTree0.getRoot();
      avlTree0.delete(1);
      avlTree0.getBalance(avlTree_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(1609);
      avlTree0.getRoot();
      avlTree0.delete((-409));
      avlTree0.delete(1950);
      avlTree0.find(1950);
      avlTree0.height();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      int int0 = 2022;
      avlTree0.delete(2022);
      avlTree0.delete(1038);
      avlTree0.insert(0);
      avlTree0.delete(1082);
      avlTree0.insert((-29));
      avlTree0.getRoot();
      int int1 = (-4941);
      // Undeclared exception!
      try { 
        avlTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.height();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(381);
      AvlTree.Node avlTree_Node0 = avlTree0.getRoot();
      avlTree0.insert(0);
      avlTree_Node0.key = 0;
      avlTree0.insert((-1486));
      avlTree0.delete(381);
      avlTree0.getBalance(avlTree_Node0);
      avlTree0.getRoot();
      avlTree0.delete((-1933));
      avlTree0.delete(381);
      avlTree0.delete((-1933));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert((-1272));
      int int0 = 106;
      avlTree0.delete((-1272));
      avlTree0.insert(106);
      avlTree0.height();
      avlTree0.insert((-1272));
      avlTree0.insert(0);
      avlTree0.delete(0);
      avlTree0.height();
      int int1 = (-2831);
      // Undeclared exception!
      try { 
        avlTree0.insert((-1272));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      AvlTree.Node avlTree_Node0 = avlTree0.new Node(1679);
      avlTree0.insert((-1));
      AvlTree.Node avlTree_Node1 = avlTree0.new Node(0);
      avlTree_Node0.right = avlTree_Node1;
      avlTree_Node1.height = 0;
      avlTree0.insert(1679);
      avlTree0.getBalance(avlTree_Node0);
      avlTree0.insert(0);
      avlTree_Node0.right.key = 1;
      avlTree0.getBalance(avlTree_Node0.right);
      avlTree0.delete(0);
      avlTree0.height();
      // Undeclared exception!
      try { 
        avlTree0.insert(1679);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(0);
      avlTree0.delete(0);
      avlTree0.insert(0);
      avlTree0.find(0);
      avlTree0.insert((-924));
      avlTree0.getRoot();
      avlTree0.find(0);
      // Undeclared exception!
      try { 
        avlTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(0);
      // Undeclared exception!
      try { 
        avlTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      AvlTree.Node avlTree_Node0 = avlTree0.new Node((-4593));
      avlTree0.insert(2559);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(1851);
      avlTree0.insert((-1));
      avlTree0.insert(0);
      avlTree0.height();
      avlTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(0);
      avlTree0.insert(3477);
      avlTree0.delete((-1972));
      avlTree0.insert(1269);
      avlTree0.find(0);
      AvlTree.Node avlTree_Node0 = avlTree0.getRoot();
      avlTree_Node0.height = (-1972);
      avlTree0.getBalance(avlTree_Node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.insert(769);
      avlTree0.delete(101);
      avlTree0.insert(1);
      avlTree0.find((-1001));
      avlTree0.find((-2661));
      avlTree0.find(0);
      avlTree0.delete(3587);
      avlTree0.insert(10);
      avlTree0.find((-436));
      avlTree0.find(0);
      avlTree0.find((-1));
      avlTree0.find(101);
      avlTree0.find(0);
      avlTree0.find(1873);
      avlTree0.find(608);
      avlTree0.find(0);
      avlTree0.find((-436));
      avlTree0.find(608);
      avlTree0.find(2530);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.delete(0);
      avlTree0.delete(0);
      avlTree0.insert(101);
      avlTree0.delete((-2250));
      avlTree0.insert((-1403));
      avlTree0.insert(0);
      avlTree0.delete((-3021));
      avlTree0.insert(147);
      avlTree0.insert((-2250));
      avlTree0.delete((-436));
      avlTree0.insert((-572));
      avlTree0.insert((-1860));
      avlTree0.find(530);
      avlTree0.delete(0);
      avlTree0.delete(0);
      avlTree0.height();
      avlTree0.getRoot();
      avlTree0.find(0);
      avlTree0.insert(763);
      avlTree0.getRoot();
      avlTree0.find(0);
      avlTree0.insert(0);
      avlTree0.insert((-1));
      // Undeclared exception!
      try { 
        avlTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.delete(0);
      avlTree0.delete(0);
      avlTree0.insert(101);
      avlTree0.delete((-2250));
      avlTree0.insert((-1403));
      avlTree0.insert(0);
      avlTree0.insert(147);
      avlTree0.insert((-2250));
      avlTree0.delete((-436));
      avlTree0.insert((-572));
      avlTree0.insert((-1860));
      avlTree0.find(530);
      avlTree0.delete(0);
      avlTree0.delete(0);
      avlTree0.height();
      avlTree0.getRoot();
      avlTree0.find(0);
      avlTree0.insert(763);
      avlTree0.getRoot();
      avlTree0.find(0);
      avlTree0.insert(0);
      avlTree0.insert((-1));
      // Undeclared exception!
      try { 
        avlTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("avl.AvlTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.find(0);
      avlTree0.delete(0);
      avlTree0.insert((-481));
      avlTree0.delete(0);
      avlTree0.find(20);
      avlTree0.height();
      avlTree0.delete((-1001));
      avlTree0.delete((-481));
      avlTree0.getRoot();
      avlTree0.getRoot();
      avlTree0.getRoot();
      avlTree0.getBalance((AvlTree.Node) null);
      avlTree0.delete(0);
      avlTree0.delete(0);
      avlTree0.insert((-3468));
      avlTree0.height();
      avlTree0.insert((-717));
      avlTree0.height();
      avlTree0.find((-3468));
      avlTree0.height();
      avlTree0.height();
      avlTree0.insert(1);
      avlTree0.insert((-3723));
      avlTree0.insert(0);
      assertEquals(2, avlTree0.height());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AvlTree avlTree0 = new AvlTree();
      avlTree0.delete((-2266));
      int int0 = avlTree0.height();
      assertEquals((-1), int0);
  }
}
